//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShopFormsClient.CategoryReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CategoryReference.ICategory")]
    public interface ICategory {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Create", ReplyAction="http://tempuri.org/ICategory/CreateResponse")]
        bool Create(ShopService.Transporter.TCategory t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Create", ReplyAction="http://tempuri.org/ICategory/CreateResponse")]
        System.Threading.Tasks.Task<bool> CreateAsync(ShopService.Transporter.TCategory t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Read", ReplyAction="http://tempuri.org/ICategory/ReadResponse")]
        ShopService.Transporter.TCategory Read(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Read", ReplyAction="http://tempuri.org/ICategory/ReadResponse")]
        System.Threading.Tasks.Task<ShopService.Transporter.TCategory> ReadAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/ReadAll", ReplyAction="http://tempuri.org/ICategory/ReadAllResponse")]
        ShopService.Transporter.TCategory[] ReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/ReadAll", ReplyAction="http://tempuri.org/ICategory/ReadAllResponse")]
        System.Threading.Tasks.Task<ShopService.Transporter.TCategory[]> ReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Update", ReplyAction="http://tempuri.org/ICategory/UpdateResponse")]
        bool Update(ShopService.Transporter.TCategory t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Update", ReplyAction="http://tempuri.org/ICategory/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(ShopService.Transporter.TCategory t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Delete", ReplyAction="http://tempuri.org/ICategory/DeleteResponse")]
        bool Delete(ShopService.Transporter.TCategory t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Delete", ReplyAction="http://tempuri.org/ICategory/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(ShopService.Transporter.TCategory t);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICategoryChannel : ShopFormsClient.CategoryReference.ICategory, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CategoryClient : System.ServiceModel.ClientBase<ShopFormsClient.CategoryReference.ICategory>, ShopFormsClient.CategoryReference.ICategory {
        
        public CategoryClient() {
        }
        
        public CategoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CategoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Create(ShopService.Transporter.TCategory t) {
            return base.Channel.Create(t);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAsync(ShopService.Transporter.TCategory t) {
            return base.Channel.CreateAsync(t);
        }
        
        public ShopService.Transporter.TCategory Read(int id) {
            return base.Channel.Read(id);
        }
        
        public System.Threading.Tasks.Task<ShopService.Transporter.TCategory> ReadAsync(int id) {
            return base.Channel.ReadAsync(id);
        }
        
        public ShopService.Transporter.TCategory[] ReadAll() {
            return base.Channel.ReadAll();
        }
        
        public System.Threading.Tasks.Task<ShopService.Transporter.TCategory[]> ReadAllAsync() {
            return base.Channel.ReadAllAsync();
        }
        
        public bool Update(ShopService.Transporter.TCategory t) {
            return base.Channel.Update(t);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(ShopService.Transporter.TCategory t) {
            return base.Channel.UpdateAsync(t);
        }
        
        public bool Delete(ShopService.Transporter.TCategory t) {
            return base.Channel.Delete(t);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(ShopService.Transporter.TCategory t) {
            return base.Channel.DeleteAsync(t);
        }
    }
}
