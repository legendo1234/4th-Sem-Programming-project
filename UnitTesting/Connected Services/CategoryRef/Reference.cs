//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTesting.CategoryRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TCategory", Namespace="http://schemas.datacontract.org/2004/07/ShopService.Transporter")]
    [System.SerializableAttribute()]
    public partial class TCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int timestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int timestamp {
            get {
                return this.timestampField;
            }
            set {
                if ((this.timestampField.Equals(value) != true)) {
                    this.timestampField = value;
                    this.RaisePropertyChanged("timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CategoryRef.ICategory")]
    public interface ICategory {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Create", ReplyAction="http://tempuri.org/ICategory/CreateResponse")]
        bool Create(UnitTesting.CategoryRef.TCategory t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Create", ReplyAction="http://tempuri.org/ICategory/CreateResponse")]
        System.Threading.Tasks.Task<bool> CreateAsync(UnitTesting.CategoryRef.TCategory t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Read", ReplyAction="http://tempuri.org/ICategory/ReadResponse")]
        UnitTesting.CategoryRef.TCategory Read(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Read", ReplyAction="http://tempuri.org/ICategory/ReadResponse")]
        System.Threading.Tasks.Task<UnitTesting.CategoryRef.TCategory> ReadAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/ReadAll", ReplyAction="http://tempuri.org/ICategory/ReadAllResponse")]
        UnitTesting.CategoryRef.TCategory[] ReadAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/ReadAll", ReplyAction="http://tempuri.org/ICategory/ReadAllResponse")]
        System.Threading.Tasks.Task<UnitTesting.CategoryRef.TCategory[]> ReadAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Update", ReplyAction="http://tempuri.org/ICategory/UpdateResponse")]
        bool Update(UnitTesting.CategoryRef.TCategory t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Update", ReplyAction="http://tempuri.org/ICategory/UpdateResponse")]
        System.Threading.Tasks.Task<bool> UpdateAsync(UnitTesting.CategoryRef.TCategory t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Delete", ReplyAction="http://tempuri.org/ICategory/DeleteResponse")]
        bool Delete(UnitTesting.CategoryRef.TCategory t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategory/Delete", ReplyAction="http://tempuri.org/ICategory/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(UnitTesting.CategoryRef.TCategory t);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICategoryChannel : UnitTesting.CategoryRef.ICategory, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CategoryClient : System.ServiceModel.ClientBase<UnitTesting.CategoryRef.ICategory>, UnitTesting.CategoryRef.ICategory {
        
        public CategoryClient() {
        }
        
        public CategoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CategoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool Create(UnitTesting.CategoryRef.TCategory t) {
            return base.Channel.Create(t);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAsync(UnitTesting.CategoryRef.TCategory t) {
            return base.Channel.CreateAsync(t);
        }
        
        public UnitTesting.CategoryRef.TCategory Read(int id) {
            return base.Channel.Read(id);
        }
        
        public System.Threading.Tasks.Task<UnitTesting.CategoryRef.TCategory> ReadAsync(int id) {
            return base.Channel.ReadAsync(id);
        }
        
        public UnitTesting.CategoryRef.TCategory[] ReadAll() {
            return base.Channel.ReadAll();
        }
        
        public System.Threading.Tasks.Task<UnitTesting.CategoryRef.TCategory[]> ReadAllAsync() {
            return base.Channel.ReadAllAsync();
        }
        
        public bool Update(UnitTesting.CategoryRef.TCategory t) {
            return base.Channel.Update(t);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAsync(UnitTesting.CategoryRef.TCategory t) {
            return base.Channel.UpdateAsync(t);
        }
        
        public bool Delete(UnitTesting.CategoryRef.TCategory t) {
            return base.Channel.Delete(t);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(UnitTesting.CategoryRef.TCategory t) {
            return base.Channel.DeleteAsync(t);
        }
    }
}
